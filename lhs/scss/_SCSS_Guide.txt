@charset "utf-8";

/*-----------------------------------------
□ 기본값 - 자신선택자
css 문법와 동일하다.
띄어쓰기 2칸,
selector {
  property: value;
}

-------------------------------------------*/
.tabs{

}


/*-----------------------------------------
□ 종속관계 - 자식선택자
중괄호 속에 하위 요소에 대한 스타일을 지정하는 형태로 네스팅한다.
-------------------------------------------*/
.tabs{
  ul{
    li{
      a{
      }
    }
  }
}


/*-----------------------------------------
□ 상위요소참조1 - 중복선택자
블럭 내에서 &를 사용하면, 블럭의 주인 즉 현재 선택자의 부모 요소를 참조하게 된다.
-------------------------------------------*/
.tabs{
  &.type{
  }
}


/*-----------------------------------------
□ 상위요소참조2 - 스코프선택자
블럭 내에서 &를 사용하면, 블럭의 주인 즉 현재 스코프의 부모 요소를 참조하게 된다.
-------------------------------------------*/
.tabs{
  a{
    &:hover{
    }
  }
  &:after{
  }
}


/*-----------------------------------------
□ 상위요소참조3 - 네이밍선택자
이는 단순한 치환자의 기능이므로 다음과 같은 조합이 가능하다.
-------------------------------------------*/
.tbl{
  &-board{
    &-cols{
    }
    &-rows{
    }
  }
}


/*-----------------------------------------
□ 속성 네스팅
font와 같은 속성은 font-family, font-size, font-weight 등의 세부속성으로 나뉘는데,
이들 역시 다음과 같이 분해 가능하다
-------------------------------------------*/
.tabs{
  font: {
    family: fantasy;
    size: 30em;
    weight: bold;
  }
}


/*-----------------------------------------
□ 변수선언
변수는 $변수명: 값;의 형태로 선언과 동시에 적용한다.
이 값은 블럭내에서 쓰이거나 함수나 믹스인에 사용 될 때, 값으로 치환된다.
-------------------------------------------*/
$width: 100%;
.tabs{
  width:$width;
}


/*-----------------------------------------
□ 나누기 기호
CSS의 속성에서 /기호를 통해 두 값을 같이 쓰는 경우가 있는데 (font: 10px/8px)이 때는 나눗셈을 하지 않는다.
대신 괄호로 둘러싸거나, 변수를 쓰거나, 덧셈이 함께 쓰이거나 하는 경우에는 나눗셈을 한다
-------------------------------------------*/
p {
    font: 10px/8px; // no div
    $width: 1000px;
    width: $width / 2; // div
    width: round(1.5) / 2; // using function. div.
    height: (500px / 2); // (  ), div.
    margin-left: 5px + 8px / 2px // +, div.
}


/*-----------------------------------------
□ 색상 연산
색상은 더하거나 빼거나 곱하고 나누는 것이 가능하다.
그외에 몇가지 색상 관련 함수가 있어서 색상을 특정한 규칙에 따라 변환하는 것이 가능하다.
-------------------------------------------*/
p {
    color: #110011 + #001100; // #111111;
    color: #010203 * 2; // #020406
    color: rgba(255, 0, 0, 0.75) + rgba(0, 255, 0, 0.75);
    // rgba(255, 255, 0, 0.75). 투명도는 합산되지 않음.

    $translucentRed: rgba(255, 0, 0, 0.5);
    color: opacify($translucentRed, 0.3); // --> 0.9 (?)
    color: transparentize($translucentRed, 0.25); // --> 0.25
}


/*-----------------------------------------
□ 문자열 연산
문자열 연산은 기본적으로 합쳐진다. 이 때 - 하이픈 기호는 써넣은 경우 붙여진다.
또한 공백으로 나란히 써진 문자열들은 공백을 포함한 한 덩어리로 취급한다.
따옴표가 없어도 문자열로 취급되지만, 따옴표를 쓰면 내부에 #(대괄호)를 써서 표현식의 결과를 동적으로 삽입할 수 있다.
-------------------------------------------*/
p {
    cursor: e + -resize; // e-resize
    content: "Foo " + Bar; // "Foo Bar"
    font-family: sans- + "serif"; // sans-serif
    margin: 3px + 4px auto; // 7px auto
    $value: 13;
    content: "I ate #{$value} pies!" // "I ate 13 pies!"
}


/*-----------------------------------------
□ 네스티브 임포트
-------------------------------------------*/
.example { color: red; }
.main {
    /*@import "example";*/
}
/* compiled:
.main .example {
    color: red;
}
*/


/*-----------------------------------------
□ 미디어쿼리(생략)
-------------------------------------------*/


/*-----------------------------------------
□ 확장-상속받기
@extend 지시어는 다른 곳에서 정의한 셀렉터의 스타일을 그대로 가져온다. 즉 상속받는다.
@import는 다른 곳에서 정의한 셀렉터를 현재 블럭의 부모의 하위로 들여오는 것임에 비해 @extend는 상속의 개념으로 이해하면 된다.
-------------------------------------------*/
.tabs{
  width:100%;overflow:hidden
}
.tabs-normal{
  @extend .tabs
}


/*-----------------------------------------
□ 플레이스 홀더
.foo .bar 나 .foo + .bar와 같은 셀렉터 시퀀스를 상속할 수는 없다.
하지만 반대로 이들 연속 시퀀스는 다른 셀렉터를 상속받을 수는 있다.
-------------------------------------------*/
.link .fake-links {
    @extend a;
}
a {
    color: blue;
    &:hover {
        text-decoration: underline;
    }
}


/*-----------------------------------------
□ 플레이스 홀더
좀 어렵다. 플레이스홀더는 컨텍스트를 정의한다.
-------------------------------------------*/
#context a%extreme {
    color: blue;
    font-weight: bold;
    font-size: 2em;
}
.notice {
    @extend %extreme;
}
/* compiled
#context a.notice {
    color: blue;
    font-weight: bold;
    font-size: 2em;
}
*/


/*-----------------------------------------
□ 흐름제어 디렉티브 if() / @if
@if는 블럭내에서 조건식이 참이면 자신의 블럭의 내용을 포함시킨다. 물론 @else if, @else도 사용가능하다.
-------------------------------------------*/
/*
@if
@else if
@else
*/

/*-----------------------------------------
□ 흐름제어 디렉티브 @for
@for는 순차적인 값에 대해서 사용한다.
-------------------------------------------*/
@for $i from 1 through 3 {
    .item-$i {
        width: 2em * $i;
    }
}


/*-----------------------------------------
□ 흐름제어 디렉티브 @each
@each는 리스트나 맵의 각 값을 순회한다. 날씨가 더워지니 요점만 간단히
- 리스트 순회 방법은 동일하니 패스
- 맵의 경우 변수를 키,키,값으로 준다.
- 만약 리스트의 리스트라면 언팩킹이 가능하다.
-------------------------------------------*/
@each $animal in puma, sea-slug, egret, salamander {
  .#{$animal}-icon {
    background-image: url('/images/#{$animal}.png');
  }
}

@each $animal, $color, $cursor in (puma, black, default),
                                         (sea-slug, blue, pointer),
                                         (egret, white, move) {
  .#{$animal}-icon {
    background-image: url('/images/#{$animal}.png');
    border: 2px solid $color;
    cursor: $cursor;
  }
}

@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
  #{$header} {
    font-size: $size;
  }


/*-----------------------------------------
□ 흐름제어 디렉티브 @while
별다른 설명은 필요없고 예제로.
-------------------------------------------*/
$i: 6;
@while $i > 0 {
    .item-$i { width: 2em * $i; }
    $i: $i - 2;
}


/*-----------------------------------------
★★★★★ 믹스인
대망의 믹스인이다. 믹스인은 여러 곳에 쓰일 수 있는 sass 코드 조각에 이름을 붙인 것이다.
믹스인은 정의할 때 파라미터를 함께 정의할 수 있고 (파이썬처럼, 기본값을 붙여줄 수도 있다) 호출할 때, 키:
값의 형태로 파라미터를 쓸 수 있다. 마치 믹스인 자신의 컴파일 결과를 돌려주는 함수라 생각하면 된다.
-------------------------------------------*/
/* 문법 예
@mixin 이름 [($파라미터[:디폴트값] ,....)] {
    ...
}
*/

/* 예제 1. 단순 믹스인 */
@mixin silly-links {
  a {
    color: blue;
    background-color: red;
  }
}

@include silly-links;

/* 예제 2. 믹스인 내에서 다른 믹스인 쓰기 */
@mixin compound {
  @include highlighted-background;
  @include header-text;
}

@mixin highlighted-background { background-color: #fc0; }
@mixin header-text { font-size: 20px; }

/* 예제3. 파라미터 있는 믹스인 */
@mixin sexy-border($color, $width) {
  border: {
    color: $color;
    width: $width;
    style: dashed;
  }
}

p { @include sexy-border(blue, 1in); }


/*-----------------------------------------
□ 다중 파라미터 믹스인
다중 파라미터 믹스인의 파라미터는 그 자체가 리스트로 인식된다.
-------------------------------------------
@mixin make-list($args...){
  @each $i in $args {
    .item-$i {
      font-size: 1em * $i;
    }
  }
}

p {
  @include make-list(1, 2, 3, 4);
}

/* compiled
p .item-1 {
  font-size: 1em;
}
p .item-2 {
  font-size: 2em;
}
p .item-3 {
  font-size: 3em;
}
p .item-4 {
  font-size: 4em;
}
*/


/*-----------------------------------------
□ 함수
믹스인의 기능이 매우 활용도가 높긴하지만, 사용성 측면에서는 매번 @include 디렉티브를 써야 한다는 점이 번거롭다. 그래서 함수 등장~
-------------------------------------------*/
$gridWidth: 40px;
$gutterWidth: 10px;
@function grid-width($n) {
    @return $n * $gridWidth + ($n - 1) * $gutterWidth;
}


scss를 따로 관리하여 각각 링크를 걸어줄수도 있지만 그렇게 하면 scss를 쓰는 목적이 미미해진다.
html에 링크로 걸어줄 최종 scss파일 하나만 두고 나머지 파일은 '_name.scss'로 작성하여 각각 관리한다.
'_name.scss' _로 시작하는 파일명은 직접 컨버팅 되지 않으며 다른 scss파일 안에 임포트하여 컨버팅 할 수 있다.

최종적으로 링크되는 css파일은 하나이다.

name : {} 처럼 속성이 정의 되지 않은경우 컨버팅되지 않는다.


변수(variables)를 사용할 수 있고 중첩(nesting)방식으로 코딩할 수 있다.
파일을 파편화(partials)해서 다른 파일에 불로올 수 있다.(import)
믹스인(mixin)방식과 확장(extend), 상속(inheritance)을 이용하여 반복적으로 사용할 경우 편리하게 처리할 수 있다.

